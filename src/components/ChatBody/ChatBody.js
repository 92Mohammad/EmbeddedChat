import { Box, Message, MessageToolbox } from '@rocket.chat/fuselage';
import React, { useContext, useEffect } from 'react';
import styles from './ChatBody.module.css';
import PropTypes from 'prop-types';
import { EmojiPicker } from '../EmojiPicker/index';
import Popup from 'reactjs-popup';
import { Markdown } from '../Markdown/index';
import { useMediaQuery } from '@rocket.chat/fuselage-hooks';
import RCContext from '../../context/RCInstance';
import { useMessageStore } from '../../store';

const ChatBody = ({ height }) => {
  const { RCInstance } = useContext(RCContext);
  const isSmallScreen = useMediaQuery('(max-width: 992px)');

  const messages = useMessageStore((state) => state.messages);
  const setMessages = useMessageStore((state) => state.setMessages);

  useEffect(() => {
    async function getMessages() {
      const { messages } = await RCInstance.getMessages();
      setMessages(messages);
    }
    RCInstance.realtime(getMessages);
    getMessages();

    return () => RCInstance.close();
  }, []);

  const handleEmojiClick = (_, e) => {
    let emoji = `:${e.name}:`;
    console.log(emoji);
  };

  return (
    <Box className={styles.container} height={height}>
      {messages && messages.length ? (
        messages.map((msg) => (
          <Message key={msg._id}>
            <Message.Container>
              <Message.Header>
                <Message.Name>{msg.u?.name}</Message.Name>
                <Message.Username>@{msg.u.username}</Message.Username>
                <Message.Timestamp>
                  {new Date(msg.ts).toDateString()}
                </Message.Timestamp>
              </Message.Header>
              <Message.Body>
                <Markdown body={msg.msg} />
              </Message.Body>
            </Message.Container>
            <MessageToolbox.Wrapper>
              <MessageToolbox>
                <MessageToolbox.Item icon="thread" />
                <MessageToolbox.Item icon="star" />
                <Popup
                  trigger={
                    <MessageToolbox.Item
                      icon="emoji"
                      onClick={() => console.log('saf')}
                    />
                  }
                  position={isSmallScreen ? 'left top' : 'left center'}
                >
                  <EmojiPicker handleEmojiClick={handleEmojiClick} />
                </Popup>
                <MessageToolbox.Item icon="pin" />
              </MessageToolbox>
            </MessageToolbox.Wrapper>
          </Message>
        ))
      ) : (
        <Box textAlign="center" p="20px" spacing={'10px'}>
          <svg
            width="24"
            height="24"
            viewBox="0 0 22 22"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M2 11C2 6.02944 6.02944 2 11 2C15.9706 2 20 6.02944 20 11C20 15.9706 15.9706 20 11 20C6.02944 20 2 15.9706 2 11ZM11 0C4.92487 0 0 4.92487 0 11C0 17.0751 4.92487 22 11 22C17.0751 22 22 17.0751 22 11C22 4.92487 17.0751 0 11 0ZM11.6676 8.305C11.478 8.38353 11.3057 8.49864 11.1606 8.64375V8.64437C10.8698 8.93788 10.707 9.33465 10.708 9.74787C10.7089 10.1611 10.8735 10.5571 11.1658 10.8492C11.458 11.1414 11.854 11.3059 12.2673 11.3067C12.6805 11.3076 13.0772 11.1447 13.3706 10.8537C13.5157 10.7086 13.6308 10.5364 13.7094 10.3468C13.7879 10.1572 13.8283 9.95397 13.8283 9.74875C13.8283 9.54353 13.7879 9.34032 13.7094 9.15073C13.6308 8.96113 13.5157 8.78886 13.3706 8.64375C13.2255 8.49864 13.0532 8.38353 12.8636 8.305C12.6741 8.22647 12.4708 8.18604 12.2656 8.18604C12.0604 8.18604 11.8572 8.22647 11.6676 8.305ZM12.5046 9.17144C12.5805 9.20282 12.6494 9.24885 12.7075 9.30688C12.8248 9.42407 12.8907 9.58305 12.8908 9.74884C12.8908 9.91464 12.825 10.0737 12.7078 10.1909C12.5906 10.3082 12.4316 10.3741 12.2658 10.3742C12.1001 10.3742 11.941 10.3084 11.8237 10.1912C11.7657 10.1332 11.7196 10.0643 11.6882 9.98849C11.6567 9.91266 11.6405 9.83138 11.6405 9.74928C11.6405 9.66719 11.6566 9.5859 11.688 9.51004C11.7194 9.43419 11.7654 9.36526 11.8234 9.30719C11.8815 9.24912 11.9504 9.20305 12.0262 9.17161C12.102 9.14016 12.1833 9.12397 12.2654 9.12394C12.3475 9.12391 12.4288 9.14005 12.5046 9.17144ZM16.0166 5.99562C15.8196 5.79843 15.5775 5.65215 15.3113 5.56938V5.57L14.8969 5.44125C14.1629 5.21356 13.3807 5.19067 12.6347 5.37506C11.8886 5.55944 11.2071 5.9441 10.6637 6.4875L10.0413 7.11C9.62025 6.79496 9.09981 6.64221 8.57533 6.67975C8.05085 6.71729 7.55747 6.9426 7.18563 7.31437L6.40875 8.09125C6.32097 8.17914 6.27166 8.29828 6.27166 8.4225C6.27166 8.54672 6.32097 8.66586 6.40875 8.75375L7.40375 9.7475L7.29125 9.86C7.18958 9.96158 7.10893 10.0822 7.0539 10.215C6.99887 10.3477 6.97055 10.49 6.97055 10.6337C6.97055 10.7775 6.99887 10.9198 7.0539 11.0525C7.10893 11.1853 7.18958 11.3059 7.29125 11.4075L7.585 11.7013L6.72 12.2194C6.6589 12.2559 6.60693 12.306 6.56804 12.3656C6.52916 12.4253 6.50438 12.493 6.49558 12.5637C6.48679 12.6344 6.49421 12.7061 6.51728 12.7735C6.54036 12.8408 6.57848 12.9021 6.62875 12.9525L9.06 15.3837C9.11074 15.4344 9.17243 15.4728 9.24033 15.4959C9.30823 15.519 9.38052 15.5262 9.45163 15.5169C9.52275 15.5077 9.5908 15.4823 9.65055 15.4426C9.71029 15.4029 9.76014 15.3501 9.79625 15.2881L10.3031 14.4194L10.6075 14.7238C10.7091 14.8253 10.8296 14.9059 10.9624 14.9609C11.0951 15.0158 11.2373 15.0441 11.3809 15.0441C11.5246 15.0441 11.6668 15.0158 11.7995 14.9609C11.9322 14.9059 12.0528 14.8253 12.1544 14.7238L12.265 14.6131L13.2587 15.6069C13.3466 15.6947 13.4658 15.744 13.59 15.744C13.7142 15.744 13.8334 15.6947 13.9213 15.6069L14.6975 14.83C15.0692 14.4584 15.2945 13.9653 15.3321 13.441C15.3698 12.9168 15.2172 12.3965 14.9025 11.9756L15.5263 11.3519C16.07 10.8082 16.4548 10.1262 16.6391 9.37972C16.8234 8.6332 16.8001 7.85052 16.5719 7.11625L16.4425 6.70125C16.3599 6.43498 16.2137 6.19281 16.0166 5.99562ZM15.3538 6.65867C15.4434 6.74828 15.5099 6.85835 15.5475 6.97938L15.6763 7.395C15.8538 7.96594 15.8719 8.57453 15.7287 9.15503C15.5855 9.73552 15.2864 10.2659 14.8638 10.6887L11.4913 14.0606C11.462 14.0898 11.4223 14.1062 11.3809 14.1062C11.3396 14.1062 11.2999 14.0898 11.2706 14.0606L7.95375 10.7444C7.9392 10.7299 7.92765 10.7126 7.91978 10.6936C7.9119 10.6747 7.90785 10.6543 7.90785 10.6337C7.90785 10.6132 7.9119 10.5928 7.91978 10.5739C7.92765 10.5549 7.9392 10.5376 7.95375 10.5231L11.3263 7.15062C11.7489 6.72785 12.2791 6.4286 12.8595 6.28519C13.4399 6.14177 14.0484 6.15964 14.6194 6.33687L15.0331 6.465C15.1542 6.50259 15.2642 6.56906 15.3538 6.65867ZM7.30698 15.1684C7.30913 15.2899 7.26405 15.4074 7.18125 15.4962L5.63438 17.0431C5.54644 17.1311 5.42717 17.1805 5.30281 17.1805C5.17845 17.1805 5.05919 17.1311 4.97125 17.0431C4.88331 16.9552 4.83391 16.8359 4.83391 16.7116C4.83391 16.5872 4.88331 16.4679 4.97125 16.38L6.51875 14.8337C6.60761 14.7509 6.72514 14.7059 6.84658 14.708C6.96801 14.7102 7.08388 14.7594 7.16976 14.8452C7.25565 14.9311 7.30484 15.047 7.30698 15.1684ZM6.10271 13.95C6.10271 13.8258 6.05341 13.7066 5.96562 13.6187C5.92209 13.5752 5.87041 13.5406 5.81351 13.5171C5.75662 13.4935 5.69564 13.4813 5.63406 13.4813C5.57248 13.4813 5.5115 13.4935 5.45461 13.5171C5.39772 13.5406 5.34603 13.5752 5.3025 13.6187L4.64 14.2819C4.55465 14.3703 4.50746 14.4888 4.50859 14.6117C4.50971 14.7346 4.55907 14.8521 4.64602 14.939C4.73297 15.0258 4.85056 15.0751 4.97347 15.0761C5.09637 15.0771 5.21476 15.0298 5.30312 14.9444L5.96562 14.2812C6.05341 14.1934 6.10271 14.0742 6.10271 13.95ZM8.50361 16.5616C8.47799 16.6191 8.44105 16.6708 8.395 16.7137H8.39563L7.73313 17.375C7.64427 17.4578 7.52674 17.5029 7.4053 17.5007C7.28386 17.4986 7.16799 17.4494 7.08211 17.3635C6.99623 17.2776 6.94703 17.1618 6.94489 17.0403C6.94275 16.9189 6.98783 16.8014 7.07063 16.7125L7.7325 16.0513C7.77541 16.0052 7.82716 15.9683 7.88466 15.9426C7.94216 15.917 8.00423 15.9032 8.06717 15.9021C8.13011 15.901 8.19263 15.9126 8.251 15.9362C8.30937 15.9597 8.36239 15.9948 8.4069 16.0394C8.45141 16.0839 8.4865 16.1369 8.51008 16.1953C8.53365 16.2536 8.54523 16.3161 8.54412 16.3791C8.54301 16.442 8.52923 16.5041 8.50361 16.5616Z"
              fill="#F5455C"
            />
          </svg>
          <h1 style={{ display: 'inline' }}>EmbeddedChat | Home</h1>
          <p>
            For more documentation visit:{' '}
            <a
              target={'_blank'}
              rel="noreferrer"
              href="https://github.com/RocketChat/EmbeddedChat#README"
            >
              README
            </a>
          </p>
          <p>
            To enable anonymous mode pass in `anonymous` prop and make sure you
            allow you enable it in your Rocket.Chat instance.
          </p>
        </Box>
      )}
    </Box>
  );
};

export default ChatBody;

ChatBody.propTypes = {
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};
